import numpy as np
from sentence_transformers import SentenceTransformer

embedding_model = SentenceTransformer('all-MiniLM-L6-v2')

def retrieve_chunks(query, top_k=5):
    # Embed query
    query_emb = embedding_model.encode([query])[0]

    # Access global stored docs
    global DOCUMENT_STORE
    chunks = DOCUMENT_STORE.get("chunks", [])
    embeddings = DOCUMENT_STORE.get("embeddings", [])

    if not chunks or len(chunks) == 0:
        return []

    # Compute cosine similarity
    def cosine_sim(a, b):
        return np.dot(a, b) / (np.linalg.norm(a) * np.linalg.norm(b))

    similarities = [cosine_sim(query_emb, emb) for emb in embeddings]

    # Get indices of top k
    top_indices = np.argsort(similarities)[::-1][:top_k]

    # Return top chunks
    return [chunks[i] for i in top_indices]
